@page "/actulizar-producto/{id}"
@using OnlineBlazorApp.Data.Model
@using OnlineBlazorApp.Data.Service

@inject IProductoService ProductoService
@inject ICategoriaService CategoriaService
@inject NavigationManager NavigationManager
@inject IFileUpload fileUpload

<EditForm Model="@producto" OnValidSubmit="@ProductoInsert">
    <div class="form-group">
        <label for="name" class="form-label">Nombre : </label>
        <input type="text" class="form-control" id="name" @bind="producto.nombre" />
    </div>
    <div class="form-group">
        <label for="cantidad">Cantidad</label>
        <input type="number" class="form-control" id="cantidad" @bind="producto.cantidad" />
    </div>
    <div class="form-group">
        <label for="categoria" class="form-label">Categoria : </label>
        <select name="categoria" id="categoria" @bind="producto.fk_cod_categoria">
            @if (categorias != null)
            {
                @foreach (var categoria in categorias)
                {
                    <option value="@categoria.pk_cod_categoria">@categoria.nombre</option>
                }
            }


        </select>

    </div>
    <div class="form-group">
        <label for="descripcion" class="form-label">Descripcion : </label>
        <input type="text" class="form-control" id="descripcion" @bind="producto.descripcion" />
    </div>
    <div class="form-group">
        <label for="precio">Precio</label>
        <input type="number" class="form-control" id="precio" @bind="producto.precio" />
    </div>
    <div class="form-group">
        <label for="imagen">Imagen</label>
        <InputFile OnChange="SeleccionarArchivo">
            @if (file != null)
            {
                <p>Archivo cargado : @file.Name</p>
            }
        </InputFile>
    </div>
    <div class="mb-2">
        <input type="submit" value="Registrar producto" class="btn btn-warning btn-block" />
    </div>
</EditForm>

@code {

    Producto producto = new Producto();
    IFileListEntry file;
    IEnumerable<Categoria> categorias;


    protected override async Task OnInitializedAsync()
    {
       // [Parameter]
        string id;
        categorias = await CategoriaService.GetAllCategorias();

    }

    protected async Task ProductoInsert()
    {
        await ProductoService.ProductoInsert(producto);
        NavigationManager.NavigateTo("/productos-list");
    }

    public bool verificarTipoImagen(String extension)
    {
        string[] typeImage = { ".png", ".jpg", ".jpeg", ".gif" };
        return typeImage.Contains(extension);
    }

    async Task SeleccionarArchivo(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null && verificarTipoImagen(Path.GetExtension(file.Name)))
        {
            producto.imagen = "/UploadImage/" + file.Name;
            await fileUpload.UploadAsync(file);
        }
    }
    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileUpload.UploadAsync(file);
        }
    }
}
